
#include "osm.h"
#include <sys/time.h>
#include <math.h>
#include <iostream>

#define FAILURE -1


double time_converting(timeval before, timeval after){
    double start= (after.tv_usec - before.tv_usec) * pow (10, 3);
    double end = (after.tv_sec - before.tv_sec) * pow (10, 9);
    return start+end;
}


/* Time measurement function for a simple arithmetic operation.
   returns time in nano-seconds upon success,
   and -1 upon failure.
   */
double osm_operation_time (unsigned int iterations) {
    if (iterations == 0) {
        return FAILURE;
    }
    int x = 0,y=2;
    //initialize time
    struct timeval before{}, after{};
    int time = gettimeofday (&before, nullptr);
    if (time == FAILURE) { return FAILURE; }
    //forloop
    unsigned int i = 0;
    while (i < iterations) {
        x += y;
        x += y;
        x += y;
        x += y;
        x += y;
        x += y;
        x += y;
        x += y;
        x += y;
        x += y;
        i += 10;

    }
    //calculate time
int time2 = gettimeofday (&after, nullptr);
    if (time2 == FAILURE) { return FAILURE; }
    return time_converting(before,after)/iterations;
}

/* Empty function */
void empty_function () {return;}


/* Time measurement function for an empty function call.
   returns time in nano-seconds upon success,
   and -1 upon failure.
   */
double osm_function_time (unsigned int iterations) {
    if (iterations == 0) {
        return FAILURE;
    }
    //initialize time
    timeval before, after;
    int time = gettimeofday (&before, nullptr);
    if (time == FAILURE) { return FAILURE; }
    //forloop
    unsigned int i = 0;
    while (i < iterations) {
        empty_function ();
        empty_function ();
        empty_function ();
        empty_function ();
        empty_function ();
        empty_function ();
        empty_function ();
        empty_function ();
        empty_function ();
        empty_function ();
        i += 10;
    }

    //calculate time
    int time2 = gettimeofday (&after, nullptr);
    if (time2 == FAILURE) { return FAILURE; }
    return time_converting(before,after)/iterations;
}

/* Time measurement function for an empty trap into the operating system.
   returns time in nano-seconds upon success,
   and -1 upon failure.
   */
double osm_syscall_time (unsigned int iterations) {
    if (iterations == 0) {
        return FAILURE;
    }
    //initialize time
    timeval before, after;
    int time = gettimeofday (&before, nullptr);
    if (time == FAILURE) { return FAILURE; }
    //forloop
    unsigned int i = 0;
    while (i < iterations) {
        OSM_NULLSYSCALL;
        OSM_NULLSYSCALL;
        OSM_NULLSYSCALL;
        OSM_NULLSYSCALL;
        OSM_NULLSYSCALL;
        OSM_NULLSYSCALL;
        OSM_NULLSYSCALL;
        OSM_NULLSYSCALL;
        OSM_NULLSYSCALL;
        OSM_NULLSYSCALL;
        i += 10;
    }
    //calculate time
    int time2 = gettimeofday (&after, nullptr);
    if (time2 == FAILURE) { return FAILURE; }
    return time_converting(before,after)/iterations;
}
int main(int argc, char* argv[]){
    std::cout<<"operation:"<<std::endl;
    std::cout<<osm_operation_time(100000)<<std::endl;
    std::cout<<osm_operation_time(100000)<<std::endl;
    std::cout<<osm_operation_time(100000)<<std::endl;
    std::cout<<"function:"<<std::endl;
    std::cout<<osm_function_time(100000)<<std::endl;
    std::cout<<osm_function_time(100000)<<std::endl;
    std::cout<<osm_function_time(100000)<<std::endl;
    std::cout<<"syscall:"<<std::endl;
    std::cout<<osm_syscall_time(100000)<<std::endl;
    std::cout<<osm_syscall_time(100000)<<std::endl;
    std::cout<<osm_syscall_time(100000)<<std::endl;
}


